@page
@{
    ViewData["Title"] = "Scanner";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Barcode Scanner</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f4f4f4;
        }

        #scanner {
            margin-bottom: 20px;
            border: 2px solid #333;
            padding: 10px;
            background-color: #fff;
        }

        #product-info {
            text-align: center;
            display: none;
        }

            #product-info img {
                max-width: 200px;
                margin-top: 10px;
            }
    </style>
</head>
<body>
    <div id="scanner">
        <input type="file" id="file-input" accept="image/*">
        <video id="video" width="400" height="300" style="border: 1px solid black;"></video>
    </div>

    <div id="product-info">
        <h3>Product Information</h3>
        <p id="product-name"></p>
        <p id="product-brand"></p>
        <img id="product-image" src="" alt="Product Image">
    </div>

    <script src="~/js/index.min.js"></script>
    <script>
        const video = document.getElementById('video');
        const fileInput = document.getElementById('file-input');
        const productInfo = document.getElementById('product-info');
        const productName = document.getElementById('product-name');
        const productBrand = document.getElementById('product-brand');
        const productImage = document.getElementById('product-image');

        // Initialize ZXing barcode scanner
        const codeReader = new ZXing.BrowserBarcodeReader();

        // Start video scanning
        async function startVideoScanning() {
            const stream = await navigator.mediaDevices.getUserMedia({
                video: { facingMode: "environment" }
            });

            video.srcObject = stream;

            codeReader.decodeFromVideoDevice(null, video, (result, error) => {
                if (result) {
                    // Decode barcode and fetch product info
                    fetchProductInfo(result.text);
                    codeReader.reset(); // Stop the video after successful scan
                } else if (error) {
                    console.error(error);
                }
            });
        }

        // Fetch product details from Open Food Facts API
        async function fetchProductInfo(barcode) {
            const url = `https://world.openfoodfacts.org/api/v0/product/${barcode}.json`;

            try {
                const response = await fetch(url);
                const data = await response.json();

                if (data.status === 1 && data.product) {
                    const product = data.product;
                    productName.textContent = product.product_name || 'No name found';
                    productBrand.textContent = product.brands || 'No brand found';
                    productImage.src = product.image_url || '';
                    productInfo.style.display = 'block'; // Show product info
                } else {
                    alert("Product not found.");
                }
            } catch (error) {
                console.error("Error fetching product:", error);
            }
        }

        // Event listener for file input (image upload)
        fileInput.addEventListener('change', handleFileUpload);

        // Handle file upload (image with barcode)
        async function handleFileUpload(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = async function(e) {
                    const image = new Image();
                    image.onload = async function() {
                        try {
                            const result = await codeReader.decodeFromImage(image);
                            fetchProductInfo(result.text); // Fetch product info from barcode
                        } catch (err) {
                            console.error('Error decoding barcode from image:', err);
                        }
                    };
                    image.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        }

        // Start video scanning on page load
        startVideoScanning();
    </script>
</body>
</html>